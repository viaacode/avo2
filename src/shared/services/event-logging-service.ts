import { useMutation } from '@apollo/react-hooks';
import { getEnv } from '../helpers/env';
import { dataService } from './data-service';
import { INSERT_EVENT_LOG_ENTRY } from './event-logging-service.gql';

type Env = 'local' | 'int' | 'qas' | 'prd';

export interface EventLogEntry {
	activity: string; // play media, add collection, add item
	agent: 'avo-logger';
	category_id: 1;
	component: 'client' | 'admin';
	// created_at: string; // generated by db
	environment: Env;
	is_system: number; // if done by system eg: sent email (-1 => false)
	message: EventMessage;
	namespace: 'avo';
	parent_id?: string; // link event together (trace id)
	timestamp: string; // create
	// trace_id: any; // x-viaa-trace-id-header => x-hasura-trace-id (should be set by proxy server
	// uuid: string; // generated by db
}

export interface Event {
	activity: string;
	component?: 'client' | 'admin';
	message: EventMessage;
}

function getDefaultEventLogEntryFields(): Partial<EventLogEntry> {
	return {
		agent: 'avo-logger',
		category_id: 1,
		component: 'client',
		environment: (getEnv('NODE_ENV') || 'prd') as Env,
		is_system: -1,
		namespace: 'avo',
		timestamp: new Date().toISOString(),
	};
}

interface EventMessage {
	body?: string;
	object?: {
		identifier: string;
		type: 'user' | 'collection';
	};
	subject?: {
		identifier: string;
		type?: string;
	};
	form_fields?: { [key: string]: any };
}

export function trackEvents(events: Event[] | Event) {
	let eventsArray: Event[];
	if (Array.isArray(events)) {
		eventsArray = events;
	} else {
		eventsArray = [events];
	}
	const eventLogEntries = eventsArray.map(
		(event: Event): EventLogEntry => {
			return {
				...getDefaultEventLogEntryFields(),
				activity: event.activity,
				component: event.component || 'client',
				message: event.message,
			} as EventLogEntry;
		}
	);
	dataService
		.mutate({
			mutation: INSERT_EVENT_LOG_ENTRY,
			variables: { eventLogEntries },
		})
		.then(() => {})
		.catch(err => {
			console.error('Failed to log events to database', { eventLogEntries, innerException: err });
		});
}
