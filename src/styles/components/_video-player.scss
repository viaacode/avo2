/* ==========================================================================
   Component: Video player
   ========================================================================== */

/* Variables
   ========================================================================== */

$player-play-button-dimensions: 7rem;
$player-play-button-icon-dimensions: 3rem;
$player-easing-soft: cubic-bezier(.62,.28,.23,.99);

.c-video-player {
	position: relative;
	overflow: hidden;

	.c-play-overlay {
		position: absolute;
		top: calc(50% - #{$player-play-button-dimensions / 2});
		left: calc(50% - #{$player-play-button-dimensions / 2});
		width: $player-play-button-dimensions;
		height: $player-play-button-dimensions;
		cursor: pointer;
	}

	.c-play-overlay__inner {
		width: $player-play-button-dimensions;
		height: $player-play-button-dimensions;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		//background-color defined in theme

		&:hover {
			//background-color defined in theme
			transition: .14s background $player-easing-soft;
		}

		.o-svg-icon {
			width: $player-play-button-icon-dimensions;
			height: $player-play-button-icon-dimensions;
		}
	}

	.c-video-player__item {
		width: 100%;
		height: 100%;

		img, video {
			width: 100%;
			height: 100%;
		}
	}

	.c-video-player__controls {
		padding: 8px 5px;
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
	}

	.c-video-player__time {
		font-size: 12px;
		white-space: nowrap;
		//Set fixed width to avoid jittering
		width: 80px;
	}

	.c-video-player__time-elapsed {
		width: 34px;
		display: inline-block;
	}
}

/* ==========================================================================
   Theme mixin : Put all skin css related code here

   Take in inputs colors variables and output a theme skin,
   the default theme is dark if the mixin is used without any variables.

   Please group CSS by files to have an easy way to know what belong to where

   When adding new code, if you need to have a new variables please update the
   default variable of the mixin and update all the _themes.player.*.scss files
   to use those new variables
   ========================================================================== */

/* ==========================================================================
   Shared mixins : Do not output css here
   ========================================================================== */

/* Mixins
   ========================================================================== */

@mixin c-button-ring-focus($shadow-color) {
	// Custom focus
	outline: 0;
	box-shadow: 0 0 0 2px $shadow-color;
	transition: .14s box-shadow $player-easing-soft;
}

@mixin c-video-player-skin(
	$base-bg: $color-gray-700,
	$base-color: rgba(#FFF, 0.67),
	$c-play-overlay-inner-bg: $color-gray-900,
	$c-spinner-fullscreen-holder-bg: rgba(#000, 0.5),
	$c-spinner-bar-bg: #FFF,
	$c-player-controls-bg: rgba($color-gray-900, 0.8),
	$c-video-player-progress-bg: $color-gray-500,
	$c-video-player-progress-inner-bg : $color-teal-bright,
	$c-button-color: #FFF,
	$c-button-icon-fill-color: #FFF,
	$c-button-focus-ring-color: $color-primary,
	$c-button-active-bg: $color-gray-500,
	$c-button-focus-bg: $color-primary
) {
	//Base style
	background: $base-bg;
	color: $base-color;

	//_components.player.video-player.scss
	.c-play-overlay__inner {
		background: rgba($c-play-overlay-inner-bg, 0.5);
		box-shadow: 0 0 5px 0px rgba(#222,0.5);
		&:hover {
		background: rgba($c-play-overlay-inner-bg, 0.7);
		box-shadow: 0 0 10px 0px rgba(#222,0.7);
		}
	}

	.c-video-player__controls {
		background: $c-player-controls-bg;
	}

	//_components.player.spinner.scss
	.c-spinner-fullscreen {
		.c-spinner-fullscreen__holder {
		background: $c-spinner-fullscreen-holder-bg;
		}
	}

	.c-spinner__bar {
		background: $c-spinner-bar-bg;
	}

	//_components.player.progress.scss
	.c-video-player-progress {
		background: $c-video-player-progress-bg;
	}

	.c-video-player-progress__inner {
		background: $c-video-player-progress-inner-bg;
	}

	.c-video-player-progress__handle {
		background: $c-video-player-progress-inner-bg;
	}

	//_components.player.button-skins.scss

	.c-button--borderless {
		color: $c-button-color;
		background: none;
		border-color: transparent;

		svg * {
			fill: $c-button-icon-fill-color;
		}

		&:hover {
			background: rgba($c-button-color,0.1);
		}

		&:focus {
			@include c-button-ring-focus($c-button-focus-ring-color);
		}

		&:active,
		&.c-button--active {
			background: $c-button-active-bg;
			border-color: transparent;
		}

		&:active:focus,
		&.c-button--active:focus {
			box-shadow: 0 0 0 2px $c-button-focus-bg;
		}
	}
}

.c-video-player.t-player-skin--dark {
	//Default variable of mixin are for dark skin
	@include c-video-player-skin();
}

/* ==========================================================================
   Progress bar for video player
   ========================================================================== */

/* Variables
   ========================================================================== */

$c-video-player-progress-height:      6px !default;
$c-video-player-progress-handle-size: $c-video-player-progress-height * 2.5 !default;

/* Component
   ========================================================================== */

.c-video-player-progress {
	min-width: 100px;
	height: $c-video-player-progress-height;
	position: relative;
}

.c-video-player-progress__inner {
	height: $c-video-player-progress-height;
	position: absolute;
	left: 0;
}

.c-video-player-progress__handle {
	width: $c-video-player-progress-handle-size;
	height: $c-video-player-progress-handle-size;
	border-radius: 50%;
	position: absolute;
	right: - $c-video-player-progress-handle-size / 2;
	top: $c-video-player-progress-height / 2 - $c-video-player-progress-handle-size / 2;
}
